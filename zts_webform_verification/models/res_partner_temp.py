
import hashlib
import uuid
from datetime import datetime
from werkzeug import urls
from odoo import api, models, fields, tools

VALIDATION_KARMA_GAIN = 3


class TempUser(models.Model):
    _name = 'res.partner.temp'
    _description = "Contact creation from portal before email confirmation"
    # _inherit = ['res.partner']

    def _default_category(self):
        return self.env['res.partner.category'].browse(self._context.get('category_id'))

    karma = fields.Integer()
    phone = fields.Char()
    email = fields.Char()
    comment = fields.Text(string='Notes')
    name = fields.Char(index=True)
    category_id = fields.Many2many('res.partner.category', column1='partner_id',
                                   column2='category_id', string='Tags', default=_default_category)
    company_id = fields.Many2one('res.company', 'Company', index=True)

    email_formatted = fields.Char(
        'Formatted Email', compute='_compute_email_formatted',
        help='Format email address "Name <email@domain>"')

    @api.depends('name', 'email')
    def _compute_email_formatted(self):
        for partner in self:
            if partner.email:
                partner.email_formatted = tools.formataddr((partner.name or u"False", partner.email or u"False"))
            else:
                partner.email_formatted = ''

    # channel_ids = fields.Many2many('mail.channel', 'mail_channel_profile_partner', 'partner_id', 'channel_id', copy=False)
    # karma = fields.Integer()
    #
    @api.model
    def _generate_profile_token(self, user_id, email):
        """Return a token for email validation. This token is valid for the day
        and is a hash based on a (secret) uuid generated by the forum module,
        the user_id, the email and currently the day (to be updated if necessary). """
        profile_uuid = self.env['ir.config_parameter'].sudo().get_param('website_profile.uuid')
        if not profile_uuid:
            profile_uuid = str(uuid.uuid4())
            self.env['ir.config_parameter'].sudo().set_param('website_profile.uuid', profile_uuid)
        return hashlib.sha256((u'%s-%s-%s-%s' % (
            datetime.now().replace(hour=0, minute=0, second=0, microsecond=0),
            profile_uuid,
            user_id,
            email
        )).encode('utf-8')).hexdigest()

    def _send_profile_validation_email(self, **kwargs):
        if not self.email:
            return False
        token = self._generate_profile_token(self.id, self.email)
        activation_template = self.env.ref('zts_webform_verification.webform_validation_email')
        if activation_template:
            params = {
                'token': token,
                'user_id': self.id,
                'email': self.email
            }
            # params.update(kwargs)
            base_url = self.env['ir.config_parameter'].sudo().get_param('web.base.url')
            token_url = base_url + '/profile/validate_email?%s' % urls.url_encode(params)
            with self._cr.savepoint():
                email_values = {'email_to': self.email, 'email_from': self.company_id.email}
                activation_template.sudo().with_context(token_url=token_url).send_mail(
                    self.id, email_values=email_values, force_send=True, raise_exception=True)
        return True

    def _process_profile_validation_token(self, token, email):
        self.ensure_one()
        validation_token = self._generate_profile_token(self.id, email)
        if token == validation_token and self.karma == 0:
            return self.write({'karma': VALIDATION_KARMA_GAIN})
        return False
